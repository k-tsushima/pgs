(* bFoldr :: (Show a, Show v) => BiGUL (a, v) v -> BiGUL ([a], v) v
bFoldr bx =
    Case [$(normal [| \(x,_) v -> null x |] [| \(x,_) -> null x |])
    ==> $(rearrV [| \v -> ((),v) |]) $
        skip1 `Prod` Replace
    , $(normal [| \(x,_) v -> not (null x) |] [| \(x,_) -> not (null x) |])
    ==> $(rearrS [| \((x:xs), e) -> (x, (xs,e)) |])$
        (Replace `Prod` bFoldr bx) `Compose` bx
    ]

bReverse :: Show s => BiGUL [s] [s]
bReverse =
        rearrS [| \s -> (s, []) |]
                bFoldr bSnoc
*)

cpg bReverse ks kv                                  ks = fun _ -> [1,2] ; kv = fun _ -> [3,4]
    rearrS (s -> (s, []))                           ks = fun _ -> ([1,2],[]) ; kv = fun _ -> [3,4]
    bFoldr bSnoc                                    ks = fun _ -> ([1,2],[]) ; kv = fun _ -> [3,4]
        in 2nd branch
        rearrS ((x:xs), e) -> (x, (xs,e))           ks = fun _ -> (1, ([2],[])); kv = fun _ -> [3,4]
        in (Replace `Prod` bFoldr bx) `Compose` bx
            (ks1, kv1) = cpg (Replace `Prod` bFoldr bx) ks (fun x -> removeInt (kv x) x)
                Initial:
                    ks1 = ks = fun _ -> (1, ([2],[]))
                    kv1 = fun x -> removeInt (kv x) x = fun x -> Con(x, Con(x, Unit))
                Decombine:
                    ks1_1 = fun _ -> 1
                    ks1_2 = fun _ -> ([2],[])
                    kv1_1 = fun x -> x
                    kv1_2 = fun x -> Con(x, Unit)
                Prod(Replace, bFoldr bSnoc)
                    (ks1_1, kv1_1) = cpg Replace ks1_1 kv1_1
                        ks1_1 = fun x -> x
                        kv1_1 = fun _ -> 1
                    (ks1_2, kv1_2) = cpg (bFoldr bSnoc) ks1_2 ksv1_2
                        ks = ks1_2 = fun _ -> ([2],[])
                        kv = kv1_2 = fun x -> Con(x, Unit)
                        ks1_2 = ks' = (fun x -> ks1 (getData (kv x) (ks2 x))), kv2)
                        kv1_2 = kv' = fun _ -> (2, [])
                    (ks1 ks2, kv2)
                Combine:
                    ks1 = ...
                    ks2 = ...
            (ks2, kv2) = cpg bSnoc kv1 kv

            (fun x -> ks1 (getData (kv x) (ks2 x))), kv2)

        inv-rearrV (x, (xs,e)) -> ((x:xs), e)
    inv-rearrS ((s, []) -> s)
